horizon: 700
tau: 0.1
dt: 0.1

# True if SST planner should be used for control initialization else False
use_planner: True

# change the name of the map after map/
map_path: "env/map/carla_map.png"
obstacle_path : "data/obstacles_carla.npy"

# diagonal penalty terms for R matrix in control norm objective
ctrl_penalty_scale_v: 1
ctrl_penalty_scale_w: 10

#if True, constrain angular vel component of optimal control to within control bounds
use_omega_constraint: True
use_lin_vel_constraint: True

# lidar scan data
angle_min : -3.1241390705108643
angle_max : 3.1415927410125732
angle_inc : 0.005806980188935995

# if True, solve using QP solver. If False, use MPC
QP:
  use_qp : True
  # smoothing methods and parameters; can only have one of use_ema_omega, use_penalty_smoothing, and omega_penalty_l2 being True
  use_ema_omega: False
  ema_frac: 1 # between [0,1], higher means less smoothing
  omega_penalty_l2: 0
  use_penalty_smoothing : False
  pen_smooth_v : 0.1
  pen_smooth_w : 0.1
  alpha_fov : 2
  alpha_obs : 2
  # possible values are "direction" (only obstacles in front of the agent are included), "distance" (360 degree obstacle inclusion),
  # or "all" (all conditions)
  obs_incl_cond : "distance"
  use_fov_slack : True
  slack_delta : -20

Planner:
  planner_max_time : 1.0

# Old MPC parameters - deprecated
# K is number of planning steps
K: 8
# gradient descent learning rate
learning_rate: 0.01
# number of epochs for gradient descent
epochs: 30
# loss_type can take values: SDFLoss, SigmoidSDFLoss, IfElseSigmoidSDFLoss, control_norm, quadratic
loss_type: control_norm
# sig_k sets the sigmoid fcn hyperparam in exp(-kx); only use with Sigmoid losses
sig_k: 1
# additional distance over the FoV radius of agent that the euclidean dist/SDF switch boundary is at
sig_bdry_r_offset: -20
# if true, uses only euclidean distance as loss fcn - use to override loss_type above for benchmarking
use_euclidean_dist: False
# True if loss function should include quadratic penalty in control deviation from planner reference output; always used for controlNorm loss
add_control_deviation_penalty: False

# if True, use autodiff for gradients of loss (constraints still use autodiff), else use finite differences
use_autodiff: False

# if True, use exp(loss); not applicable to Sigmoid loss types
use_exp_loss: False

# if True, make the SDF polygon rounded
make_rounded: False

# bounds on angular velocity in rad/s
omega_lb: -0.5 # 0.4rad/s is ~23 deg/s
omega_ub: 0.5
v_lb: 0
v_ub: 0.5

use_fov_circular: False
use_control_scaling: False
w_scale_factor: 1
FoV:
  radius: 40
  psi: 1.0472
  kappa: 0.4

epsilon_s: 0.2
render: False
